Hello!

First of all, thank you for agreeing on doing this.

For visualising the data, please use this link - https://universaldependencies.org/conllu_viewer.html
The link requires uploading of a file (.original or .final file), where it will produce the trees for the given sentences.
The sentences can be cycled through by using the numbers. In the visualisation, the given sentence (marked at the top),
is arranged in form of a dependency tree i.e. it denotes which token (a full fledged word or part thereof) should be
dependent on which other token, with the governor token at the top, and the dependent attached below this governor. For
example, in the first sentence in .original file, "." is connected to the token marked as root and CCONJ. In this case,
"." is called the dependent and the node it is attached to, is called the governor. Another way to think about this can
be as follows: An adjective describes a noun. In the visualisation where the adjective and the noun are linked to each
other, the noun is the governor, and the adjective is a dependent of this noun.

The tokens in the tree are organised in word-order, from left to right. So, the first token (including punctuation, etc.)
is the first node in the tree, and the last token in the sentence is the last node in the tree visualisation. Note that
the node marked as "<root>" is not counted as part of the tree, and is not involved in the counting of the tokens. The
counting of the tokens begins at 1, and goes up until the last token in the sentence.

Throughout the process, we are primarily concerned with tokens that are attributed as "CCONJ" and "cc" (in green, and blue
respectively). We call these as tokens-of-interest. The file "nodes.tsv" can be opened in MS-Excel, or any spreadsheet
software and contains the following data in different columns:

Column 1: Sentence Number	Refers to the sentence number when you visualise the file
Column 2: Node Number		Refers to the position of token-of-interest (starts with 1, "<root>" is not counted)
Column 3: Token			Token-of-interest itself
Column 4: Last Node Number	Refers to the position of the last token in the sentence, can be used to count to the
				token-of-interest from reverse, if more convenient.

At this point, you are requested to visualise the example-orig.conllu and example-mod.conllu files in the package, by
going to the link mentioned earlier. We would be elaborating on the annotation procedure with help of examples.

For the example, the token-of-interest would be mentioned in nodes.tsv as follows:

1	5	and	9

The example-orig.conllu file contains the original file, and the example-mod.conllu file contains the corresponding
correction. For this example, we have 2 sentence in original file and 3 sentences in mod file, but in the data,
every sentence in original file would correspond to the sentence in mod file. So, you will essentially be working with
sentence 45 (let's say) in both files. You are not concerned with sentence 46, or 44 while working with 45. And the
sentence 45 would be the same in both files.

Having made that clear, let us look at the example. The text is supposed to essentially mean 'doors of learning, and doors
of culture', but the second 'doors' is omitted, giving the sentence in the present form. Before we start pointing out how
the token could move, sentence 2 in original file shows the correct attachment that we would like to have. Now, in this
case, token-of-interest could move in one of the ways as illustrated in example-mod.conllu file. In the first two instances
in the mod file, the token-of-interest is marked to the wrong governor. It is either attached too low, or too high. Both
of these cases would be annotated as false corrections. In mod file, the third instance is exactly where we want the token
to be attached, and that is the true correction.

In the example, we were able to provide the correct attachment as it should be, but in the dataset there would not be such
data provided. It is left to you, as the annotator, to judge where the token should be attached, and whether it is attached
too high, too low, or just correct. Depending on whether the correction is true correction or false correction, you are
requested to add an additional column in the nodes.tsv file, marking 0 for false correction and 1 for true correction.
In case of a false correction, it would be also helpful if you could add in brackets the count of token where it should
actually be attached. This bit about the part in brackets is optional, but it would help me in future. To illustrate, please
find below a dummy version of the nodes.tsv file after the annotation procedure.

1	5	and	9	0 (7)
2	5	and	9	0 (7)
3	5	and	9	1

And that's it. That's the entire job. The actual data would contain about 200 tokens-of-interest in about as many sentences.
I understand that it may take time, and that you might be busy with your own work. As such, I would like to ask you to let
me know what works best for you, and by when would it be possible to get the annotated data back.

In case of any doubts/questions/concerns whatsoever regarding the task, please feel free to send an email to me at
akshayantimatter [at] gmail [dot] com

Thank you!
